/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication1;

/**
 *
 * @author ppurush
 */
Complexity:-

O(n)
Why??
Both i and j traverses at most n steps:

This techique is called the slow runner technique. i is slow runner and j is fast runner. i stops whenerver there is 
a duplicate. j skips duplicates. It traverses the entire array.
public class JavaApplication1 {

    
      public static int removeDuplicates(int[] nums) {
       int len = nums.length;
       System.out.println("Length");
       System.out.println(len);
       int i =0; 
       for(int j =1; j<len; j++)
       {
           if(nums[i]!=nums[j])
           {
               i++;
               nums[i] = nums[j];
           }
       }
       
       System.out.println("Array");
       for(int k=0;k <len; k++)
       {
           System.out.print(nums[k]);
       }       
           return i+1;
    }
     
    public static void main(String[] args) {
        // TODO code application logic here
        int nums[] ={1,1,3,3,2};
        int len = removeDuplicates(nums);
        System.out.println("Length");
        System.out.println(len);
    }
    
}
